'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _events = require('events');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mimer = require('mimer');

var _mimer2 = _interopRequireDefault(_mimer);

var _imageSize = require('image-size');

var _imageSize2 = _interopRequireDefault(_imageSize);

var _uri = require('./template/uri');

var _uri2 = _interopRequireDefault(_uri);

var _css = require('./template/css');

var _css2 = _interopRequireDefault(_css);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const existsSync = _fs2.default.existsSync;
const exists = _fs2.default.exists;

class Api extends _events.EventEmitter {
  constructor() {
    super();
  }

  format(fileName, fileContent) {
    fileContent = fileContent instanceof Buffer ? fileContent : new Buffer(fileContent);
    this.fileName = fileName;
    this.base64 = fileContent.toString('base64');
    this.mimetype = (0, _mimer2.default)(fileName);
    this.content = (0, _uri2.default)({
      base64: this.base64,
      mimetype: this.mimetype
    });

    return this;
  }

  encode(fileName, handler) {
    return this.async(fileName, err => {
      if (handler) {
        if (err) {
          return handler(err);
        }

        handler.call(this, null, this.content, this);

        return this;
      }

      if (err) {
        this.emit('error', err);

        return this;
      }

      this.emit('encoded', this.content, this);
    });
  }

  encodeSync(fileName) {
    if (!fileName || !fileName.trim || fileName.trim() === '') {
      throw new Error('Insert a File path as string argument');
    }

    if (existsSync(fileName)) {
      let fileContent = _fs2.default.readFileSync(fileName);

      return this.format(fileName, fileContent).content;
    }

    throw new Error(`The file ${ fileName } was not found!`);
  }

  async(fileName, handler) {
    exists(fileName, () => {
      _fs2.default.readFile(fileName, (err, fileContent) => {
        if (err) {
          return handler.call(this, err);
        }

        handler.call(this.format(fileName, fileContent));
      });
    });
  }

  getCSS() {
    let config = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    if (!this.content) {
      throw new Error('Create a data-uri config using the method encodeSync');
    }

    config.class = config.class || _path2.default.basename(this.fileName, _path2.default.extname(this.fileName));
    config.background = this.content;

    if (config.width || config.height || config['background-size']) {
      config.dimensions = (0, _imageSize2.default)(this.fileName);
    }

    return (0, _css2.default)(config);
  }
}

exports.default = Api;